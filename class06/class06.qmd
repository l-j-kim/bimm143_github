---
title: "Class 6: R functions"
author: "Leah Kim (A16973745)"
format: pdf
toc: true
---
## 1. Functions
Let's start writing our first silly function to add some numbers.

Every R function has 3 things
 - name (we get to pick this)
 - input arguments (there can be loads of these separated by a comma)
 - the body (the R code that does the work)
``` {r}
add <- function(x, y=10, z=0){
  x + y + z
}
```

I can just use this function

```{r}
add(1, 100)
```
```{r}
add(1)
```

Functions can either have "required" input arguments and "optional" input arguments. The optional arguments are defined with an equals default value (`y = 10`) in the function definition

```{r}
add(1, 100, 10)
```
## 2. Generate DNA Function

>Q. Write a function to return a DNA sequence of a user specified length. Call it `generate_dna()`

```{r}
#generate_dna <- function(size = 5) {}

students <- c("jeff", "jeremy", "peter")
sample(students, size = 1)
sample(students, size = 5, replace=TRUE)
```

Now work with `bases` rather than `students`
```{r}
bases <- c("A", "C", "G", "T")
sample(bases, size = 10, replace = TRUE)
```

Now I have a working 'snippet' of code I can use.

```{r}
generate_dna <- function(size = 5) {
  bases <- c("A", "C", "G", "T")
sample(bases, size = size, replace = TRUE)
}
```

```{r}
generate_dna(100)
```
```{r}
generate_dna()
```

I want the ability to return a sequence like "AGTACCTG" i.e. a one element vector where the bases are all together.

```{r}
generate_dna <- function(size = 5, together = TRUE) {
  bases <- c("A", "C", "G", "T")
  sequence <- sample(bases, size = size, replace = TRUE)
  if(together) {
    sequence <- paste(sequence, collapse = "")
  } 
  return(sequence)
}
```

## 3. Generate Protein Function
We can ge thte set of 20 natural animo-acids from the **bio3d** package

> Q. Write a protein sequence generating function that will return sequences of a user specified length.

```{r}
generate_protein <- function(size = 5, together = TRUE) {
  #get the 20 amino acids as a vector
  aa <- bio3d::aa.table$aa1[1:20]
  sequence <- sample(aa, size = size, replace = TRUE)
  
  #optionally return a single element string
  if(together) {
    sequence <- paste(sequence, collapse = "")
  } 
  return(sequence)
}
```

> Q. Generate random proteins equences of length 6-12 amino acids.

```{r}
#generate_protein(6:12) returns an error
```

We can fix this inability to generate multiple sequences by either editing and adding to the function body code (e.g. a for loop) or by using the R **apply** family of utility functions

```{r}
ans <- sapply(6:12, generate_protein)
ans
```

It would be cool and useful if I could get FASTA format output. I want this to look like 
```
>ID.6
HLDVLV
>ID.7
VREAIQN
>ID.8
WPRSKACN
```
The functions `cat` and `paste` can help us here.

```{r}
ans <- sapply(6:12, generate_protein)
cat(paste(">ID.",6:12, sep="", "\n", ans), sep ="\n")
```

> Q. Determine if any of these sequences can be found in nature or are they unique? Why or why not?

The sequences generated are as followes: 
``` 
>ID.6
SFDRHS
>ID.7
HQNLFYY
>ID.8
DSMEMNDL
>ID.9
STYFCEKGC
>ID.10
CVDIIEFNKR
>ID.11
ECFMCPHRVDN
>ID.12
PSRKPESIFEHE 
```

I BlastP my FASTA format sequences against NR and found that the sequences of lengths 6 through 8 are not unique and found in the databases with 100% coverage and identity.

Random sequences of length 9 and above are unique and cannot be foud in the databases.

